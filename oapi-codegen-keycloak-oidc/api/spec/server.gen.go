// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	ctx.Set(OidcScopes, []string{"pets:list"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	ctx.Set(OidcScopes, []string{"pets:create"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OidcScopes, []string{"pets:delete"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(OidcScopes, []string{"pets:read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/cNhD9KwTboyKpTlCkOtXJusACgW3Uycn1gRZHu2z5ZXLktWDovxdDatfe1dpp",
	"0aJogZ4kUSTnzZs3j3zkrTPeWbAYefPIY7sGI9LrWQgu0IsPzkNABWm4dRLoKSG2QXlUzvImT2bpX8E7",
	"F4xA3nBl8e0JLzgOHvInrCDwseAGYhSrFzfa/t4tjRiUXfFxLHiAu14FkLy55lPA7fSbseDnsLkEnOO2",
	"whwJdy4MMNcxXAPzgPOABUexmq/7PPjX1x0ATdEJ3oRNaH3R8eb6kX8boOMN/6Z6KkQ1VaGachmLw2SU",
	"nEP6YtVdD0zJfVzPi/H9uyPFOECqJL8Zb2g0QtsHhcMVoclxnZJtenqwS/nRWQstfgmaN3yN6Juq0q4V",
	"eu0iNu/r93UVQGgTKzOkl6rcgNZvfrNuYyvaQ8k3rbOdWvVBpDR28PYi8JHwKNu5rECLok00ghGKgguv",
	"EIT5MW7EagWhVI4XU8X5VR5jp5dL9hmE4QXvd4hjU1XPFo3FAamnLArjNaTVuBbI+giRCSI3ogvARGTC",
	"MnjI09AxCcbZiEEgsA4E9gEiUzaV5MKDpZ3eljWLHlrVqXabuFYt2AhPWuWnXrRrYCdlPcO82WxKkX6X",
	"LqyqaW2sPi0/np1fnb05KetyjUYnAUMw8aK7gnCvWjiaeJXmVES/Qv2ctcspT17wewgxs/JdWZc1bU1V",
	"El7xhr9NQwX3AtdJKhUxRC+rrPh9Xn8G7IONTGidqGRdcCZRFIeIYDLX9N1HCGxNLLctxMjQlb8QXdQO",
	"ibql5A3/SVlJUBOCIAwghJj6az8uihVtwTqlEQK7HTjpijf8rocwPImG5vFissPUcQgmpTP3hzwgQhAD",
	"fUccEoPUeKl19xEY8aBMb5jtzS0E6tUAsdeYYIVEywuYtDIK90B91WjHG2ru6B2Jg1ac1PW2hcBmJ/Je",
	"TyKsfo0E8fFY2q/ZVPaoAyLGWS95QLYFkzutE73GP4XnNRj5wDoSuLfw4KFFkAymOU/ulkSSfe2aIMZG",
	"q4jkgQWPvTEiDEf0Svi9i0eU/TGAwGQRFjY0d9v7qY1KtuhzfjSF7ENrtwE5E/SpJD3z7M0Q8YOTw9/G",
	"1PZcmVN1CUg6FFLSYwebPz8jMPQw/kVdfVVO/135tEkAhwKaySLtkkyyelRyzELSgEcuKXmc1kZlVzqd",
	"7OxWRJDMZW0tFyz2lPkRJS3S6iymV71xuSA38lkBE5bJicjVn4xIyZkeXnKl4zeOuSu9m2dNQDIK+W8u",
	"90TUQbkXu5KlWg1suaAkXj8L9+u6q/Zy8dJx92FI//54VTvAdv2PFfV/S5g0EkDIF0+U5wrJ24T746X8",
	"RHdrJuEetPMGLLI8d+92uHcH/6Guaz7ejL8HAAD///9luRbnDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
