version: '3.9'

services:

  go-chi-server:
    container_name: go-chi-server
    image: patilchinmay/go-chi-server:latest
    build:
      context: .
      dockerfile: ./Dockerfile
      target: run
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    # env_file: .env
    networks:
      - backend
    deploy:
      resources:
        reservations:
          # These are guaranteed to have
          cpus: '0.50' # 50% CPU time of a single core
          memory: 50M # 50 MB Memory
        limits:
          # These are upper limits after which throttling will take place
          cpus: '1'
          memory: 100M

  # The setup of db+pgadmin is persistent
  db:
    container_name: postgres
    image: postgres:15.3-bullseye
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres} # use the value defined in POSTGRES_USER env var. If not present, use 'postgres'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-users} # automatically create this db
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      # https://github.com/peter-evans/docker-compose-healthcheck
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.1
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:


volumes:
  postgres:
  pgadmin:
